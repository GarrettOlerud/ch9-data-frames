# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
workers <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, min = 40000, max = 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- paste(salaries_2017, runif(100, min = -5000, max = 10000))
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of employee 57
# How many employees got a raise?
# What was the dollar value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
salaries <- data.frame(c(salaries_2017, salaries_2018, workers,
"stringsasFactors=false"))
salaries$change <- salaries_2018 - salaries_2017
salaries$change <- c(salaries_2018 - salaries_2017)
data("USPersonalExpenditure")
is.data.frame(USPersonalExpenditure)
data.frame(USPersonalExpenditure)
colnames(USPersonalExpenditure)
rownames(USPersonalExpenditure)
USPersonalExpenditure$category <- rownames(USPersonalExpenditure)
us_exp$category <- rownames(us_exp)
us_exp <- data.frame(USPersonalExpenditure)
us_exp$category <- rownames(us_exp)
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
us_exp <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(us_exp)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(USPersonalExpenditure)
# Add a column "category" to your data frame that contains the rownames
us_exp$category <- rownames(us_exp)
# How much money was spent on personal care in 1940?
# How much money was spent on Food and Tobacco in 1960?
# What was the highest expenditure category in 1960?
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
us_exp$category
care_1940 <- us_exp["Personal Care", "x1940"]
care_1940 <- us_exp['Personal Care', 'x1940']
care_1940
care_1940 <- us_exp['Personal Care', 'x1940']
data/gates_money.csv
data(data/gates_money.csv)
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
setwd("C:/Users/Garre/Desktop/info201/ch9-data-frames/exercise-4")
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
View(grants)
organization <- grants$organization
is.vector(organization)
# Exercise 4: external data sets: Gates Foundation Educational Grants
data(data/gates_money.csv)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
mean_spending <- mean(grants$total_amount)
# What was the dollar amount of the largest grant?
biggest_donation <- max(grants$total_amount)
# What was the dollar amount of the smallest grant?
smallest_donation <- min(grants$total_amount)
# Which organization received the largest grant?
largest_recipiant <- organization[grants$total_amount == biggest_donation]
# Which organization received the smallest grant?
smallest_recipiant <- organization[grants$total_amount == smallest_donation]
# How many grants were awarded in 2010?
length(grants$total_amount[grants$start_year == 2010])
